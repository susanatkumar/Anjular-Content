program-1:display image
-----------------------
1. place the image inside assests folder
2. use it in view 
			
program-2:Use bootstrap 
-----------------------
1. npm install -s bootstrap@3.3.7
2. update angular.json file with the below 
	"styles": [
              "src/styles.css",			  "node_modules/bootstrap/dist/css/bootstrap.css"
            ],			
		(OR)
	add the below line in styles.css	
	@import '~bootstrap/dist/css/bootstrap.css'
	
program-3:interpolation and property binding
----------------------------------------
import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
    late: `<div>
                    <h1 [innerHtml]='myText'></h1>
                    <img [src]='imagePath'/>
					<img bind-src ='imagePath'/>
					<h2 [innerHtml]='2+3'></h2>
                    <hr>
                    <h1>{{myText}}</h1>
                    <img src='{{imagePath}}'/>
					<h2>{{2+3}}</h2>
                </div>`
})
export class AppComponent {
    myText: string = 'Interpolation';
    imagePath: string = 'https://angular.io/assets/images/logos/angular/logo-nav@2x.png';
}


program-4:interpolation vs property binding
-------------------------------------------
->to set an element property to a non-string data value, 
we must use property binding not interpolation


import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
    template: `<div>
    <button disabled='{{isDisabled}}'>Try Me</button>
    <br/><br/>
    <button [disabled]='isDisabled'>Try Me</button>
	<br/><br/>
	<button bind-disabled='isDisabled'>Try Me</button>
                     </div>`
})
export class AppComponent {
isDisabled: boolean = false;
}


program-5:interpolation vs property binding
-------------------------------------------
->when we need to concatenate strings we have to use 
interpolation instead property binding

import { Component } frpom '@angular/core';
@Component({
    selector: 'my-app',
    template: `<div>
                    <h1>My Name is {{myText}}</h1>
                    <img src='https://angular.io/{{imagePath}}'/>
					

		<h1> a is {{a}} b is {{b}} addition is {{a+b}}</h1>

		<h1>{{ 'a is '+a+' b is '+b+' additon is '+(a+b) }}</h1>
                </div>`
})
export class AppComponent {
    name: string = 'Sachin Tendulkar';
    imagePath: string = 'assets/images/logos/angular/logo-nav@2x.png';
}

program-6:Event binding
-----------------------
@Component({
    selector: 'my-app',
    template: `<div>
                    <h1>click the below button to invoke the function</h1>
                    <button (click)="f1()">btn-1</button>
                    <br/><hr/>
                    <h1 [hidden]='flag'>Show/Hide this Paragraph By Clicking the Below Button</h1>
                    <button (click)="flag = !flag" >btn-2</button>
                </div>`
})
export class AppComponent {
  flag:boolean = false;
  f1(){
    alert("I am f1")
  }
}

program-7:Addition of 2 numbers
--------------------------------
import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
    template: `<div>
                    number1:
                    <input #num1 /> <br/><br/>
                    number2:
                    <input #num2 /> <br/><br/>

                    <button (click)="add(num1.value,num2.value)">Add</button>
                </div>`
})
export class AppComponent {
  add(a,b){
    alert(Number(a)+Number(b));
  }
}

program-8:attribute Binding
---------------------------
import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
    template: `<table border=1>
      <tr><td [attr.colspan]="1 + 1">One-Two</td></tr>
      <tr><td>three</td><td>four</td></tr>
      <tr><td>five</td><td>six</td></tr>
    </table>`
})
export class AppComponent {
}

-> Error
<tr><td colspan="{{1 + 1}}">Three-Four</td></tr>

the <td> element does not have a colspan property. It has the "colspan" attribute, 
but interpolation and property binding can set only properties, not attributes


program-9:class binding
------------------------
import { Component } from '@angular/core';

@Component({
    selector: 'my-app',
    styles:['.myClass{color:red;border:5px solid green;}'],
    template: `
    <h1>
      <p [class.myClass]='flag'> Add a class to an element </p>
      <p [ngClass]="myClasses"> Add Multiple classes to an element </p>
      <p [ngClass]="myFunction()"> Add Multiple classes to an element </p>
    </h1>`
})
export class AppComponent {
    flag : boolean = true;
    myClasses = {
      class1 : true,
      class2 : false,
      class3 : true
    } 
    myFunction(){
      return this.myClasses;
    }
}


program-10:style binding
------------------------
import { Component } from '@angular/core';

@Component({
    selector: 'my-app',
    template: `
    <h1>
      <p [style.color]=" 'red' "> Add a style </p>
      <p [style.fontSize.px]='48'> Add style with unit </p>
      <p [style.background-color]=" flag?'green':'blue' "> Add style conditionally </p>
      <p [ngStyle]="myStyles"> NgStyle for multiple values </p>
      <p [ngStyle]="myFunction()"> NgStyle for multiple values </p>
    </h1>`
})
export class AppComponent {
    flag : boolean = true;
    myStyles = {
        'background-color': 'lime',
        'font-size': '20px',
        'border': '5px dotted red',
        'padding':'20px'
    }
    myFunction(){
      return this.myStyles;
    }
}


program-11:Two-way data binding
-------------------------------
- import { FormsModule }   from '@angular/forms';
- imports: [
    BrowserModule, FormsModule
  ]
  
import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
    template : `<div>
        <input [(ngModel)]="name" />
		<input bindon-ngModel='name' />
        Your Name is: {{name}}
    </div>`
})
export class AppComponent {
}

program-12:Safe Navigation Operator
----------------------------------
import { Component } from '@angular/core';
@Component({
    selector: 'my-app',
           template: `
    <h1>
      {{emp1.name}}--{{emp1.age}}--{{emp1.sal}} <br>
      {{emp2?.name}} <br>
    </h1>`
})
export class AppComponent {
    emp1 = {name:'sachin',age:35,sal:5000}
    emp2 = null;
}
//if emp2 is not there, it doesn't throw error

Program-13:  View Encapsulation
-----------------------------
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>MyProject1</title>
  <base href="/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <style>
    .hello {
      font-size: 40px;
      border: 5px solid red;
    }
  </style>
</head>
<body>
  <my-root>Loading...</my-root>
  <p class="hello">This is a paragraph from index.html file</p>
</body>
</html>
*********************
import { Component, ViewChild, ViewEncapsulation } from '@angular/core';

@Component({
  selector: 'my-root',
  template: "<div class='hello'>Hello World</div>",
  encapsulation: ViewEncapsulation.None,
  //encapsulation: ViewEncapsulation.None/Native/Emulated(Default),
  styles: ['.hello{background-color:green;']
})
export class AppComponent {

}

program-14
Template Reference Variable @viewChild
-----------------------------
import { Component, ViewChild } from '@angular/core';

@Component({
  selector: 'my-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  @ViewChild('name') nameRef;
  @ViewChild('age') ageRef;

  myName;
  myAge;
  showData() {    
    this.myName = this.nameRef.nativeElement.value;
    this.myAge = this.ageRef.nativeElement.value;
    alert(`${this.myName} ${this.myAge}`)
  }
}
*******************
<h1>Using Template Reference variable in component file</h1>

Name: <input #name><br><br>
Age: <input ref-age><br><br>

<button (click)='showData()'>get Date</button>



program-15: *ngIf-else directive
----------------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
  <div *ngIf="x%2 == 0; else odd">
    {{x}} is an even number
  </div>

  <ng-template #odd>
    {{x}} is an odd number
  </ng-template>    
  `
})
export class AppComponent {
  x: number = 6;
}

----------OR---------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
  <ng-template 
  *ngIf="x%2==0;then evenBlock; else oddBlock">
</ng-template>

<ng-template #evenBlock>
  <p>
    {{x}} is an even number
  </p>
</ng-template>

<ng-template #oddBlock>
  <p>
  {{x}} is an odd number
  </p>
</ng-template>  
  `
})
export class AppComponent {
  x: number = 9;
}

program-16: ngswitch directive
----------------------------------
import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  template: `
  <h1 [ngSwitch]="x">
    <p *ngSwitchCase="1">Monday</p>
    <p *ngSwitchCase="2">Tuesday</p>
    <p *ngSwitchCase="3">Wednesday</p>
    <p *ngSwitchCase="4">Thursday</p>
    <p *ngSwitchCase="5">Friday</p>
    <p *ngSwitchCase="6">Saturday</p>
    <p *ngSwitchCase="7">Sunday</p>
    <p *ngSwitchDefault>Not a valid number</p>
  </h1>   
  `
})
export class AppComponent {
  x: number = 2;
}

*****
ngFor by default tracks list items using object identity. 
This means that if you build a list of new objects from scratch with the 
exact same values as the previous list and pass this newly built list 
to ngFor, Angular will not be able to tell that a given 
list item is already present or not.

If you are not passing trackBy, 
your component will be removed from the DOM and rendered again.
*****
program-17: ngFor directive with trackBy
--------------------------------------
import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  employees: any[];

  constructor() {
    this.employees = [
      { eId: 101, name: "sanjay", sal: 5000 },
      { eId: 104, name: "deepak", sal: 8000 },
      { eId: 103, name: "ranjan", sal: 7000 },
      { eId: 102, name: "manoj", sal: 9000 }
    ]
  }
  getNewEmployees() {
    this.employees = [
      { eId: 101, name: "sanjay", sal: 5000 },
      { eId: 104, name: "deepak", sal: 8000 },
      { eId: 103, name: "ranjan", sal: 7000 },
      { eId: 102, name: "manoj", sal: 9000 },
      { eId: 106, name: "rajeev", sal: 9000 }
    ]
  }

  trackByEmpId(employee: any) {
    return employee.eId;
  }
}
************************
<table border=5 align=center width=50%>
    <tr>
        <th>EmpId</th>
        <th>name</th>
        <th>salary</th>
    </tr>
    <tr *ngFor="let emp of employees;trackBy:trackByEmpId">
        <td>{{emp.eId}}</td>
        <td>{{emp.name}}</td>
        <td>{{emp.sal}}</td>
    </tr>
</table>
<button (click)="getNewEmployees()">Refresh Data</button>

program-18 (Decimal Pipe/number)
----------------------------

<h1> {{ 2585285762678 | number }} </h1>
<h1> {{ 258.5285762678 | number }} </h1>
<h1> {{25.5285762678 | number:'3.2-4'}}</h1>
<h1> {{25.5 | number:'3.2-4'}}</h1>

format '3.2-5'
***************
minIntegerDigits = 3 
minFractionDigits = 2 
maxFractionDigits = 5 

program-19 (Date Pipe)
----------------------------
<h1> {{ ob }} </h1>
<h1> {{ ob | date }} </h1>
<h1> {{ ob | date:'fullDate' }} </h1>
<h1> {{ ob | date:'shortDate' }} </h1>
<h1> {{ ob | date:'mediumDate' }} </h1>
<h1> {{ ob | date:'dd-MM-yyyy'}} </h1>
<h1> {{ ob | date:'MMMM dd yyyy'}} </h1>

program-20 (Async Pipe)
----------------------------
import { Component } from "@angular/core";
import { Observable,interval } from 'rxjs';
@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  createObservable3 = interval(2000);
  testObservable3 = this.createObservable3.subscribe(val => console.log(val));
}            
**********
<h1>Observable Example</h1>
<h1>{{createObservable3 | async }}</h1>

program-21: Custom Pipe(title case)
--------------------------------
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'title'
})
export class TitlePipe implements PipeTransform {
  transform(input){
    var output = input.replace(/\w\S*/g, function (txt) {
			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
		});

    return output;
  }
}

program-22: Custom Pipe(Remaining Char)
--------------------------------
import { Pipe, PipeTransform } from '@angular/core';
@Pipe({
  name: 'count'
})
export class CountPipe implements PipeTransform {
  transform(input){
    var output = 150 - input.length;
    return output;
  }
}

program-23: Custom Pipe(Search)
--------------------------------
import { Pipe, PipeTransform } from '@angular/core';
@Pipe({
  name: 'search'
})
export class SearchPipe implements PipeTransform {
  transform(items: any[], searchText: string): any[] {
  	if (!items) return [];
  	if (!searchText) return items;

  	searchText = searchText.toLowerCase();
  	return items.filter(item => {
  		return item.toLowerCase().includes(searchText);
  	});
  }
}

program-24: Custom Pipe(Mr. Miss)
--------------------------------
import { Pipe, PipeTransform } from '@angular/core';
@Pipe({
  name: 'title'
})
export class SearchPipe implements PipeTransform {
  transform(name:any, emp?:any): any {
  	if(emp.gender == 'male')
		return "mr. "+name
	else
		return "miss. "+name
  }
}

program-25: use pre-defined pipes in component
--------------------------------------------
import { Component, ViewChild } from '@angular/core';
import { CurrencyPipe } from '@angular/common';

@Component({
  selector: 'my-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [CurrencyPipe]
})
export class AppComponent {
  constructor(private currencyPipe: CurrencyPipe) {

  }
  sal = 5000;
  formattedSal1 = this.currencyPipe.transform(this.sal);
  formattedSal2 = this.currencyPipe.transform(this.sal, '$');
}



program-26: pure pipe vs impure pipe
---------------------------------
-A pure pipe is only called when Angular detects a change in the value 
or the parameters passed to a pipe.(on component load only)

-An impure pipe is called for every change detection cycle
 no matter whether the value or parameters changes.(on every change)
 
-By Default every pipe is pure pipe

ex:
@Pipe({
  name: 'myCustomPipe', 
  pure: true/false
})

import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  template: `
    <h2>
    enter a number 
    <input [(ngModel)]="x" #num /> &nbsp;
    <button (click)="addNewDigit(num.value)">add</button><hr>

    Original array:
    <span *ngFor="let digit of originalList">
      <b>{{digit}}</b>, &nbsp; 
    </span><hr>

    Pure Pipe: <br>List is being sorted on component load only<br>
    <span *ngFor="let digit of pureSortableDigits | pureSort">
      <b>{{digit}}</b>, &nbsp; 
    </span><hr>

    ImPure Pipe:<br>List is being sorted on every change<br>
    <span *ngFor="let digit of impureSortableDigits | impureSort">
      <b>{{digit}}</b>, &nbsp; 
    </span>
    </h2>
  `
})
export class AppComponent {
  newDigit: number

  originalList: number[] = [
    2, 3, 4, 1
  ]

  pureSortableDigits: number[] = [
    2, 3, 4, 1
  ]

  impureSortableDigits: number[] = [
    2, 3, 4, 1
  ]

  addNewDigit(newDigit) {
    this.originalList.push(newDigit)
    this.pureSortableDigits.push(newDigit)
    this.impureSortableDigits.push(newDigit)
  }
}


program-27: inputs and outputs(component communication)
----------------------------
import { Component, OnInit } from '@angular/core';
@Component({
  selector: 'app-parent',
  template: `<h3>Parent Component <br>
    x from its own component is: {{x}} <br>
    y from its own component is: {{y}} <br>

    a from child is: {{aParent}} <br>
    b from child is: {{bParent}} <br>
    
    <hr>
  <app-child [xChild]='x' [yChild]='y' 
  (aEvent)="getA($event)" (bEvent)="getB($event)"></app-child>
  </h3>`
})
export class ParentComponent {
  x: number = 10;
  y: number = 20;

  aParent : number;
  bParent : string;
  
  getA(temp:number){
      this.aParent = temp;
  }
  getB(temp:string){
    this.bParent = temp;
  }
}
****
import { Component, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-child',
  inputs: ['xChild', 'yChild'],
  outputs: ['aEvent', 'bEvent'],
  template: `<h3>Child Component</h3>
    a from its own component is: {{a}} <br>
    b from its own component is: {{b}} <br>

  x value from parent is: {{xChild}} <br>
  y value from parent is: {{yChild}} <br>

  <button (click)='sendA()'>send a data</button>&nbsp;
  <button (click)='sendB()'>send b data</button>
 `
})
export class ChildComponent {
  xChild: number;
  yChild: number;

  a: number = 15;
  b: string = "hiiiiii";

  aEvent = new EventEmitter<number>();
  bEvent = new  EventEmitter<string>();

  sendA():void{
    this.aEvent.emit(this.a);
  }
  sendB():void{
    this.bEvent.emit(this.b);
  }
}


*******
life cycle hooks
------------------
The hooks/lifecycle methods are executed in this order:
constructor
-This is invoked when Angular creates a component or directive by calling new on the class.

ngOnChanges
-Invoked every time there is a change in one of the input properties of the component.

ngOnInit
-Invoked when given component has been initialized.
This hook is only called once after the first ngOnChanges.

ngDoCheck
-Invoked when the change detector of the given component is invoked. 
It allows us to implement our  own change detection
algorithm for the given component.
 
ngOnDestroy
-This method will be invoked just before 
Angular destroys the component.

ngAfterContentInit
Invoked after Angular performs any content projection into the components view (see the previous lecture on Content Projection for more info).

ngAfterContentChecked
Invoked each time the content of the given component has been checked by the change detection mechanism of Angular.

ngAfterViewInit
Invoked when the components view has been fully initialized.

ngAfterViewChecked
Invoked each time the view of the given component has been checked by the change detection mechanism of Angular.

N.p-ngDoCheck and ngOnChanges should not be implemented together on the same component

program-28 : life cycle hooks all methods
--------------------------------------
import { Component } from "@angular/core";
@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.css']
})
export class AppComponent {
  num: number = 0;

  constructor() {
    console.log("app component constructor")
  }
  ngOnInit() {
    console.log('ngOnInit');
  }
  ngOnChanges() {
    console.log('ngOnChanges');
  }
  ngDoCheck() {
    console.log('ngDoCheck');
  }
  ngAfterContentInit() {
    console.log('ngAfterContentInit');
  }
  ngAfterContentChecked() {
    console.log('ngAfterContentChecked')
  }
  ngAfterViewInit() {
    console.log('ngAfterViewInit');
  }
  ngAfterViewChecked() {
    console.log('ngAfterViewChecked');
  }
  ngOnDestroy() {
    console.log('ngOnDestory');
  }
  add() {
    this.num++;
  }
}
------
<h1>
    this is app component <br>
    Parent Component num: {{num}} <br>
    <button class="btn" (click)="add()">Increment(+)</button> <br>
    <hr>
    <app-my-child [childNum]='num'></app-my-child>
</h1>
---------
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'my-child',
  templateUrl: './mychild.component.html',
  styleUrls: ['./mychild.component.css'],
  inputs: ['childNum']
})
export class MychildComponent implements OnInit {

  ngOnInit() {
    console.log('child ngOnInit');
  }
  ngOnChanges() {
    console.log('child ngOnChanges');
  }
  ngDoCheck() {
    console.log('child ngDoCheck');
  }
  ngAfterContentInit() {
    console.log('child ngAfterContentInit');
  }
  ngAfterContentChecked() {
    console.log('child ngAfterContentChecked')
  }
  ngAfterViewInit() {
    console.log('child ngAfterViewInit');
  }
  ngAfterViewChecked() {
    console.log('child ngAfterViewChecked');
  }
  ngOnDestroy() {
    console.log('child ngOnDestory');
  }

}
--------
<p>
  This is child component <br>
  child component Num: {{childNum}}
</p>



program-ngDOCheck()
--------------------
import { Component, OnInit, OnChanges, ChangeDetectionStrategy, DoCheck, 
  ChangeDetectorRef } from '@angular/core';

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css'],
  inputs: ['xChild'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ChildComponent implements OnChanges, OnInit, DoCheck {
  constructor(private changeDetectorObj: ChangeDetectorRef) {
  }
  ngOnChanges(myChanges) {
    console.log('onchanges called', myChanges)
  }
  ngOnInit() {
    console.log('oninit called')
  }
  ngDoCheck() {
    this.changeDetectorObj.markForCheck();
  }
}


program-29: @ViewChild and ngAfterViewInit lifecycle hooks
----------------------------------------------
import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements AfterViewInit {
  @ViewChild('myInputBox') inputBox: ElementRef;

  constructor() {
    console.log(this.inputBox); //not yet available
  }
  ngAfterViewInit() {
    this.inputBox.nativeElement.focus();    
    console.log(this.inputBox)
  }
}
*************
<h1>@ViewChild to inject a reference to a DOM element</h1>
<input type="text" #myInputBox>



Program-30 @viewChild to access child members in parent component
--------------------------------------------------------------
import { Component, ViewChild, AfterViewInit } from '@angular/core';
import { ChildComponent } from './child/child.component'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements AfterViewInit {
  @ViewChild(ChildComponent) childRef: ChildComponent;

  constructor() {
    console.log("inside constructor")
    // console.log(this.childRef.a); //not yet available
    // console.log(this.childRef.b); //not yet available
  }
  ngAfterViewInit() {
    console.log("inside ngAfterViewInit")
    console.log(this.childRef.a);
    console.log(this.childRef.b);
  }
}


program-31: create a math Services
------------------------------
import { Injectable } from '@angular/core';
@Injectable()
export class MathService {
    add(a:number,b:number){
      return a+b;
    }
    sub(a:number,b:number){
      return a-b;
    }
    mul(a:number,b:number){
      return a*b;
    }
    div(a:number,b:number){
      return a/b;
    }
}
*********
import { Component } from "@angular/core";
import { MathService } from './math.service'

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.css']
})
export class AppComponent {
    addResult;
    subResult;
    mulResult;
    divResult;

    constructor(obj : MathService){
        let a = parseInt(prompt("enter a value"));
        let b = parseInt(prompt("enter a value"));
        this.addResult = obj.add(a,b);
        this.subResult = obj.sub(a,b);
        this.mulResult = obj.mul(a,b);`
        this.divResult = obj.div(a,b);
    }
}


program-32: httpClient example
---------------------------
import { Component } from "@angular/core";
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.css']
})
export class AppComponent {
result;
  constructor(obj: HttpClient) {
    obj.get('https://jsonplaceholder.typicode.com/comments')
    .subscribe((response) => {
      console.log(response);
      this.result = response;
    });
  }
}

program-33: httpClientt (Todo Service)
------------------------------------
todo.ts
-------
export interface Todo {
    userId: number;
    id: number;
    title: string;
    completed: boolean;
}
todo.service.ts
---------------
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Todo } from './todo'
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TodoService {
  constructor(public httpObj: HttpClient) {
  }
  getAllTodos(): Observable<Todo[]> {
    return this.httpObj.get<Todo[]>('https://jsonplaceholder.typicode.com/todos')
  }
}
app.component.ts
-----------------
import { Component } from "@angular/core";
import { Todo } from './todo';
import { TodoService } from './todo.service'

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.css']
})
export class AppComponent {
  todos: Todo[];
  constructor(public todoServiceObj: TodoService) {
  }
  ngOnInit() {
    this.todoServiceObj.getAllTodos()
      .subscribe((response: Todo[]) => {
        this.todos = response;
      });
  }
}

program-34: getAllComments with Observable
-----------------------------------------
export interface Comment {
    id: number;
    postId: number;
    name: string;
    email: string;
    body: string;
}
*********
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Comment } from './comment';
import { Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class CommentService {

  constructor(public obj: HttpClient) {
  }
  getAllComments(): Observable<Comment[]> {
    return this.obj.get<Comment[]>('https://jsonplaceholder.typicode.com/comments')
  }
}
*************
import { Component } from "@angular/core";
import { Comment } from './comment';
import { CommentService } from './comment.service'

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  commentList: Comment[];

  constructor(public ob: CommentService) {
    this.ob.getAllComments().subscribe((response: Comment[]) => {
      this.commentList = response;
      console.log(this.commentList);
    });
  }
}   

Program-35: Observables
----------------------
import { Component } from "@angular/core";
import { Observable, from, interval, range } from 'rxjs';
import { take, filter, map } from 'rxjs/operators';


@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  //Create an observable with given subscription function
  createObservable1 = Observable.create(function (observer) {
    observer.next("aaaaaa");
    observer.next("bbbbbb");
    observer.next("cccccc");
  });
  testObservable1 = this.createObservable1.subscribe((val) => {
    console.log(val);
  })

  //Turn an array or iterable into an observable
  arr = [10, 20, 30, 40, 50];
  createObservable2 = from(this.arr);
  testObservable2 = this.createObservable2.subscribe((ele) => {
    console.log(ele)  })

  // createObservable3 = interval(2000);
  //testObservable3 = this.createObservable3.subscribe(val => console.log(val));

  createObservable4 = interval(2000);
  createObservable4_take = this.createObservable4.pipe(take(5));
  testObservable4 = this.createObservable4_take.subscribe(val => console.log(val));

  createObservable5 = range(1, 10)
  testObservable5 = this.createObservable5.subscribe(val => console.log(val));

  createObservable6 = range(1, 20);
  even_numbers = this.createObservable6.pipe(
    filter((ele) => ele % 2 == 0)
  )
  testObservable6 = this.even_numbers.subscribe((ele) => {
    console.log("even number " + ele)
  })

  arr2 = [10, 11, 12, 13, 14, 15];
  createObservable7 = from(this.arr2);
  createObservableSquare = this.createObservable7.pipe(
    map((ele) => ele * ele)
  )
  testObservableSquare = this.createObservableSquare.subscribe(
    (ele)=>console.log(ele)
  )

}                     

******
Angular Forms
*********
Classes:
ng-pristine : No user interaction occured/not yet modified
ng-dirty : User interaction occured/modified
ng-valid : It meets all the validation
ng-invalid : One of the Validation Fails

program-36: Form with Class Names
--------------------------------
<form name='myForm'>
    Name:
    <input name='uname' [(ngModel)]='name' required /><br><br>
    Age:
    <input name='uage' type="text" [(ngModel)]='age' />
</form>

<style>
    input.ng-invalid{
        border:5px solid red;
    }
    input.ng-valid{
        border:5px solid green;
    }
</style>

program-37 template driven form Example
--------------------------------------
<form #myForm="ngForm" (ngSubmit)="logForm(myForm.value)">
  <label>Firstname:</label>
  <input type="text" name="firstname" ngModel>

  <label>Lastname:</label>
  <input type="text" name="lastname" ngModel>
  
  <div ngModelGroup='address'>
	  <label>Street:</label>
	  <input type="text" name="street" ngModel>

	  <label>Zip:</label>
	  <input type="text" name="zip" ngModel>

	  <label>City:</label>
	  <input type="text" name="city" ngModel>
  </div>
	  
  <button type="submit">Submit</button>
</form>
<h2> {{ myForm.value | json }} </h2>



program-38: Template Driven Form with validation
---------------------------------------------
<h1>template driven Form with validation</h1>

<form name="myForm" #user="ngForm" (submit)="onSubmit(user.value)">
  name:
  <input name="name" #name="ngModel" [(ngModel)]="user.name" required pattern="[a-zA-Z]+" />
  <span *ngIf="name.hasError('required') && name.dirty" class="text-danger">Name is required</span>
  <span *ngIf="name.hasError('pattern') && name.dirty" class="text-danger">Only alphabets allowed</span>
  <br><br> 
  age:
  <input name="age"  #age="ngModel" [(ngModel)]="user.age" required pattern="[0-9]{2}" />
  <span *ngIf="age.hasError('required') && age.dirty" class="text-danger">Age is required</span>
  <span *ngIf="age.hasError('pattern') && age.dirty" class="text-danger">Only Numbers allowed</span>
  <br><br>

  <input type="submit" [disabled]="!user.valid" />

</form>
<hr>
<div> Form Value: {{ user.value | json }}</div>
<div> Form Valid Status: {{ user.status | json }} </div> 

<div>Name Value: {{name.value}}</div>
<div>Age Value: {{age.value}}</div>
**********
import { Component} from '@angular/core';

@Component({
  selector: 'app-template',
  templateUrl: './template.component.html',
  styles: [
    'input.ng-invalid.ng-dirty{border:2px solid red}'
  ]
})
export class TemplateComponent {
  onSubmit(person: any) {
    alert(`Name: ${person.name} Age: ${person.age}`);
  }
}

**********
Template Driven Forms Features
---------------------------
-Easy to use
-Suitable for simple scenarios and fails for complex scenarios
-Similar to AngularJS(1.x)
-Two way data binding(using [(NgModel)] syntax)
-Minimal component code
-Automatic track of the form and its data(handled by Angular)

-Unit testing is a challenge(testing validation logic)

-limited capabilities to implement dynamic aspects like 
variable number of fields, repetitive fields, etc.

Model driven forms/Reactive Forms Features
------------------------------------------
-More flexible, but needs a lot of practice
-Handles any complex scenarios
-No data binding is done (immutable data model preferred by most developers)
-More component code and less HTML markup
-Adding elements dynamically
-Easier unit testing(testing validation logic)
-Form fields are created programmatically by using FormGroup or FormBuilder class
-Supports creation of forms with dynamic structure at runtime


program-39: Model driven form example
-------------------------------------
<form [formGroup]="registerForm">
  <label>Firstname:</label>
  <input type="text" formControlName="firstname">

  <label>Lastname:</label>
  <input type="text" formControlName="lastname">
  <div formGroupName='address'>
	  <label>Street:</label>
	  <input type="text" formControlName="street">

	  <label>Zip:</label>
	  <input type="text" formControlName="zip">

	  <label>City:</label>
	  <input type="text" formControlName="city">
  </div>
  
  <button type="submit">Submit</button>
</form>

*****************
import { Component } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';

@Component({
  selector: 'my-app',
  ...
})
export class AppComponent {

  registerForm = new FormGroup({
    firstname: new FormControl(),
    lastname: new FormControl(),
    address: new FormGroup({
      street: new FormControl(),
      zip: new FormControl(),
      city: new FormControl()
    })
  });
}


program-40: Model driven form with validation
------------------------------------------
<div>
    <h2> Model Driven Forms </h2>
    <hr>
    <form [formGroup]="myForm" (submit)="submitMyForm()">
      Name:
      <input pattern='[a-z]+'  id="name" formControlName="name" required>
      <span *ngIf="name.hasError('required') && name.dirty"> Name Required </span>
      <span *ngIf="name.hasError('pattern') && name.dirty"> Wrong Pattern </span>
      <br><br>
  
      Age:
      <input  id="age" formControlName="age">
      <br><br> 
      
      Address:
      <input  id="address" formControlName="address" >
      <span *ngIf="address.hasError('required') && address.dirty"> Address is Required </span>
      <span *ngIf="address.hasError('minlength') && address.dirty"> Min 5 characters Required </span>
      <span *ngIf="address.hasError('maxlength') && address.dirty"> max 10 characters allowed </span>
      <br><br>
  
      <button type="submit" [disabled]="!myForm.valid">Submit</button>
      &nbsp;
      <button type="reset"> Reset </button>
  
    </form>
    <hr>
    <div> Form Value: {{myForm.value | json }} </div>
    <div> Form Status:{{myForm.status | json }} </div>
  </div>
***************
import { Component } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  myFormBuilder;
  myForm;

  constructor() {
    this.myFormBuilder = new FormBuilder();
    this.generateForm();
  }
  get name() {
    return this.myForm.get('name')
  }
  get age() {
    return this.myForm.get('age')
  }
  get address() {
    return this.myForm.get('address')
  }
  generateForm() {
    let formControlObj1 = new FormControl('sachin', [Validators.required,
    Validators.pattern('[a-zA-z]+')]);
    let formControlObj2 = new FormControl('35');
    let formControlObj3 = new FormControl('mumbai', [Validators.required, Validators.pattern('0-9')]);

    this.myForm = this.myFormBuilder.group({
      name: formControlObj1,
      age: formControlObj2,
      address: formControlObj3
    })
  }

  submitMyForm() {
    alert(`Name: ${this.myForm.value.name} Age: ${this.myForm.value.age} Address: ${this.myForm.value.address}`);
  }
}


program-41: routing
-----------------
1. Specify the Base URL: <base href="/"> in index.html
2. Import RouterModule from '@angular/router'
3. Define the routes

app.module.ts
-------------
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { AboutusComponent } from './aboutus/aboutus.component';
import { CareerComponent } from './career/career.component';

import { appRoutes } from './routerConfig'

@NgModule({
    declarations: [
        AppComponent,
        HomeComponent,
        AboutusComponent,
        CareerComponent,
    ],
    imports: [
        BrowserModule, RouterModule.forRoot(appRoutes)
    ],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule { }

routerconfig.ts
----------------
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutusComponent } from './aboutus/aboutus.component';
import { CareerComponent } from './career/career.component';

export const appRoutes: Routes = [

    {
        path: 'home',
        component: HomeComponent
    },
    {
        path: 'aboutUs',
        component: AboutusComponent
    },
    {
        path: 'career',
        component: CareerComponent
    },
    {
        path: '',
        //redirectTo: 'home',
        component:HomeComponent,
        pathMatch: 'full'
    },
	{
        path: '**',
        component: notFoundComponent
    }
]


app.component.html
-------------------
	<div style="text-align: center">
	  <h1>This is {{title}}</h1>
	  <nav>
		<a routerLink="home">Home</a> <br><br>
		<a routerLink="aboutUs">About Us</a> <br><br>
		<a routerLink="career">Career</a>
	  </nav>
	  <hr>
	  <router-outlet></router-outlet>
	</div>

N.P:- Create 3 components
	  ng g c home
	  ng g c aboutUs
	  ng g c career
	  
Program-41: jasmine karma
-----------------------
import { JasmineComponent } from './jasmine.component';

describe('I am testing Jasmine component', () => {
  var obj = new JasmineComponent();

  it('I am testing add method', () => {
    expect(obj.add(2, 3)).toBe(5);
  })
  it('I am testing sub method', () => {
    expect(obj.sub(2, 3)).toBe(-1);
  })
  it('I am testing even method', () => {
    expect(obj.isNumberEven(8)).toBe(true);
    expect(obj.isNumberEven(3)).toBe(false);
  })
  it('I am testing odd method', () => {
    expect(obj.isNumberOdd(8)).toBe(false);
    expect(obj.isNumberOdd(13)).toBe(true);
  })
})
****************
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-jasmine',
  templateUrl: './jasmine.component.html',
  styleUrls: ['./jasmine.component.css']
})
export class JasmineComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

  public add(a, b) {
    return a + b;
  }
  public sub(a, b) {
    return a - b;
  }
  public isNumberEven(num){
    return num%2 === 0;
  }
  public isNumberOdd(num){
    return num%2 !== 0;
  }
}




	  
	  













